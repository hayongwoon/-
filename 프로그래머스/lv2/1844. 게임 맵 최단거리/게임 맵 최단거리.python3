from collections import deque


def bfs(maps):

    q = deque() #패킹해서 넣어줘야 한다.   
    q.append([0,0])
    distance = [[0]*len(maps[0]) for i in range(len(maps))] # 거리 기록
    distance[0][0] = 1

    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]

    #해당 시작점에서 주변의 P가 없는지 확인
    while q:
        y, x = q.popleft()

        #시작점 기준으로 상하좌우의 노드를 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if 0<=nx<len(maps[0]) and 0<=ny<len(maps) and maps[ny][nx] == 1: #방문하지 않는 노드이면서 범위 안에 있을 때,
                if distance[ny][nx] == 0:
                    q.append([ny, nx])
                    distance[ny][nx] = distance[y][x] + 1 #시작점으로부터 거리를 더한다.

    return distance[-1][-1]

def solution(maps):
    if not bfs(maps):
        return -1
    
    return bfs(maps)